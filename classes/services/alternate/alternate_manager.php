<?php

namespace block_quickmail\services\alternate;

use block_quickmail\persistents\alternate_email;
use block_quickmail\validators\create_alternate_form_validator;
use block_quickmail\exceptions\validation_exception;
use block_quickmail_emailer;

use html_writer;
use moodle_url;

class alternate_manager {

    /**
     * Creates an alternate email for the given user with the given data
     * 
     * @param  object  $user  the creating user
     * @param  object  $course  (optional) a course to scope this alternate to if desired
     * @param  array  $params
     * @return alternate_email
     */
    public static function create_alternate_for_user($user, $course = null, $params)
    {
        // validate form data
        $validator = new create_alternate_form_validator((object) $params);
        $validator->validate();

        // if errors, throw exception
        if ($validator->has_errors()) {
            throw new validation_exception('Validation exception!', $validator->errors);
        }

        $course_id = 0;
        
        // alternate_availability_only (user + course)
        // alternate_availability_user (user)
        // alternate_availability_course (course)

        // if an availability requiring a scoped course is selected
        if ($params['availability'] !== 'alternate_availability_user') {
            // and no course was given
            if ( ! $course) {
                throw new validation_exception('Validation exception!', [
                    'Course is required!'
                ]);
            } else {
                $course_id = $course->id;
            }
        }

        $user_id = $params['availability'] !== 'alternate_availability_course'
            ? $user->id
            : 0;

        // create the new alternate email
        $alternate = alternate_email::create_new([
            'setup_user_id' => $user->id,
            'email' => $params['email'],
            'firstname' => $params['firstname'],
            'lastname' => $params['lastname'],
            'course_id' => $course_id,
            'user_id' => $user_id,
        ]);

        // send the set up user a confirmation email
        self::send_confirmation_email($alternate);

        return $alternate;
    }

    /**
     * Resends a confirmation email to the alternate email's set up user (if the given user is the set up user)
     * 
     * @param  int     $alternate_email_id
     * @param  object  $user
     * @return void
     */
    public static function resend_confirmation_email_for_user($alternate_email_id, $user)
    {
        // attempt to fetch the alternate
        if ( ! $alternate = alternate_email::find_or_null($alternate_email_id)) {
            throw new validation_exception('Validation exception!', ['Could not find that alternate email.']);
        }

        // make sure the requesting user is this alternate's setup user
        if ($user->id !== $alternate->get('setup_user_id')) {
            throw new validation_exception('Validation exception!', ['Must be the owner of the email to confirm.']);
        }

        // make sure the alternate is not already confirmed (validated)
        if ($alternate->get('is_validated')) {
            throw new validation_exception('Validation exception!', ['That email has already been confirmed.']);
        }

        self::send_confirmation_email($alternate);
    }

    /**
     * Updates an alternate email to confirmed status given the correct token and user
     * 
     * @param  int     $alternate_email_id
     * @param  string  $token               generated by moodle, comes from the confirmation email's URL
     * @param  object  $user                the requesting user
     * @return alternate_email
     */
    public static function confirm_alternate_for_user($alternate_email_id, $token, $user)
    {
        // attempt to fetch the alternate
        if ( ! $alternate = alternate_email::find_or_null($alternate_email_id)) {
            throw new validation_exception('Validation exception!', ['Could not find that alternate email.']);
        }

        // make sure the alternate is not already confirmed (validated)
        if ($alternate->get('is_validated')) {
            throw new validation_exception('Validation exception!', ['That email has already been confirmed.']);
        }

        global $DB;

        // fetch the user key from the token
        if ( ! $key = $DB->get_record('user_private_key', [
            'instance' => $alternate->get('id'),
            'value' => $token,
            'userid' => $user->id,
            'script' => 'blocks/quickmail'
        ])) {
            throw new validation_exception('Validation exception!', ['Invalid token.']);
        }

        // mark this alternate email as validated
        $alternate->set('is_validated', 1);
        $alternate->update();

        // delete the key
        $DB->delete_records('user_private_key', ['id' => $key->id]);

        return $alternate;
    }

    /**
     * Sends a confirmation email to the given alternate's email
     *
     * This email will contain a confirmation URL with generated token that will need to be hit by the user for confirmation of the alternate
     * 
     * @param  alternate_email  $alternate_email
     * @return void
     */
    private static function send_confirmation_email($alternate_email)
    {
        // get the user who created this alternate
        $user = $alternate_email->get_setup_user();

        // generate, or fetch existing, token for this user and alternate instance
        // note: this does not expire!
        $token = get_user_key('blocks/quickmail', $user->id, $alternate_email->get('id'));

        // build the confirmation "landing" url
        $approval_url = new moodle_url('/blocks/quickmail/alternate.php', [
            'confirmid' => $alternate_email->get('id'), 
            'token' => $token
        ]);

        // construct the confirmation email content
        $a = (object)[];
        $a->email = $alternate_email->get('email');
        $a->url = html_writer::link($approval_url, $approval_url->out());
        $a->plugin_name = \block_quickmail_plugin::_s('pluginname');
        $a->fullname = fullname($user);
        $html_body = \block_quickmail_plugin::_s('alternate_body', $a);
        $body = strip_tags($html_body);

        // send the email
        $emailer = new block_quickmail_emailer(
            $alternate_email->get_setup_user(), 
            \block_quickmail_plugin::_s('alternate_subject'), 
            $body
        );
        $emailer->to_email($alternate_email->get('email'));
        $emailer->send();
    }

}